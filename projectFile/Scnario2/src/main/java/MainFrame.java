
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author yadongliu
 */
public class MainFrame extends javax.swing.JFrame {

    private RegexCheckerModel regexModel = new RegexCheckerModel();
    private MatrixModel matrixModel = new MatrixModel(); 
    private Matrix resultMatrix;
    DefaultTableModel resultModel = new DefaultTableModel();
    
    Turthtable model;
    
    JTable evaluate = new JTable(new notEditableTableModel());
    JTable permu = new JTable(new notEditableTableModel());
    
    JPanel prevPanel = new JPanel();
    
    ToEnglish TEmodel = new ToEnglish("");
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        
        initComponents();
        pack();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        sidePanel = new javax.swing.JPanel();
        welcomeBtn = new javax.swing.JButton();
        regexBtn = new javax.swing.JButton();
        matrixBtn = new javax.swing.JButton();
        logicBtn = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        ContentPanel = new javax.swing.JPanel();
        WelcomePage = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        RegexCheckerPanel = new javax.swing.JPanel();
        ResultTextFieldLabel = new javax.swing.JLabel();
        Result_text = new javax.swing.JLabel();
        Result_outerPic = new javax.swing.JLabel();
        Result_text2 = new javax.swing.JLabel();
        Result_text1 = new javax.swing.JLabel();
        RegexInputTextField = new javax.swing.JTextField();
        RegexInnerPic = new javax.swing.JLabel();
        InputTextField = new javax.swing.JTextField();
        InputInnerPic = new javax.swing.JLabel();
        CheckRegexBtn = new javax.swing.JButton();
        regexinfoBtn = new javax.swing.JButton();
        contentBg = new javax.swing.JLabel();
        MatrixSelectioinPanel = new javax.swing.JPanel();
        functionSelectBox = new javax.swing.JComboBox<>();
        rowSizeBox = new javax.swing.JComboBox<>();
        columnSizeBox = new javax.swing.JComboBox<>();
        matrixConfirmBtn = new javax.swing.JButton();
        matrixinfo_Btn = new javax.swing.JButton();
        Result_outerPic1 = new javax.swing.JLabel();
        InputInnerPic1 = new javax.swing.JLabel();
        RegexInnerPic1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        contentBg1 = new javax.swing.JLabel();
        MatrixPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tipLabel = new javax.swing.JLabel();
        tipLabel_bg = new javax.swing.JLabel();
        matrixlabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        matrixinfo_Btn1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        matrix1Table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        matrix2Table = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        checkBtn = new javax.swing.JButton();
        returnBtn = new javax.swing.JButton();
        contentBg2 = new javax.swing.JLabel();
        logicSelectionPage = new javax.swing.JPanel();
        toTruthTableBtn = new javax.swing.JButton();
        toEnglishselctionBtn = new javax.swing.JButton();
        contentBg4 = new javax.swing.JLabel();
        logicToEnglshPanel = new javax.swing.JPanel();
        logicinfoBtn = new javax.swing.JButton();
        toEnglishinputFiled = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        toEnglish_Table = new javax.swing.JScrollPane();
        toEngish_JTable = new javax.swing.JTable();
        toEnglish_confirmBtn = new javax.swing.JButton();
        inputFinishedBtn1 = new javax.swing.JButton();
        toEnglish_label1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        toEnglish_TextArea = new javax.swing.JTextArea();
        textArea_bg = new javax.swing.JLabel();
        logicReturnBtn1 = new javax.swing.JButton();
        contentBg3 = new javax.swing.JLabel();
        truthTablePanel = new javax.swing.JPanel();
        logicinfoBtn1 = new javax.swing.JButton();
        truthTableinputFiled1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        toEnglish_Table1 = new javax.swing.JScrollPane();
        truthTable_JTable1 = new javax.swing.JTable();
        toEnglish_Table2 = new javax.swing.JScrollPane();
        truthTable_JTable2 = new javax.swing.JTable();
        fillTableBtn = new javax.swing.JButton();
        truthTable_confirmBtn1 = new javax.swing.JButton();
        inputFinishedBtn2 = new javax.swing.JButton();
        toEnglish_label2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        truthTable_TextArea = new javax.swing.JTextArea();
        textArea_bg1 = new javax.swing.JLabel();
        logicReturnBtn2 = new javax.swing.JButton();
        contentBg5 = new javax.swing.JLabel();
        regexInfoPanel = new javax.swing.JPanel();
        infoReturnBtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        contentBg6 = new javax.swing.JLabel();
        matrixInfoPanel = new javax.swing.JPanel();
        infoReturnBtn1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        contentBg7 = new javax.swing.JLabel();
        ToEnglishInfoPanel = new javax.swing.JPanel();
        infoReturnBtn2 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        contentBg8 = new javax.swing.JLabel();
        truthTableInfoPanel1 = new javax.swing.JPanel();
        infoReturnBtn3 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        contentBg9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sidePanel.setBackground(new java.awt.Color(236, 236, 236));

        welcomeBtn.setBackground(new java.awt.Color(236, 236, 236));
        welcomeBtn.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        welcomeBtn.setForeground(new java.awt.Color(77, 93, 96));
        welcomeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/welcomebtn.png"))); // NOI18N
        welcomeBtn.setBorder(null);
        welcomeBtn.setBorderPainted(false);
        welcomeBtn.setContentAreaFilled(false);
        welcomeBtn.setFocusPainted(false);
        welcomeBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/welcomebtn_Pressed.png"))); // NOI18N
        welcomeBtn.setRequestFocusEnabled(false);
        welcomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomeBtnActionPerformed(evt);
            }
        });

        regexBtn.setBackground(new java.awt.Color(238, 246, 253));
        regexBtn.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        regexBtn.setForeground(new java.awt.Color(77, 93, 96));
        regexBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexBtn.png"))); // NOI18N
        regexBtn.setBorderPainted(false);
        regexBtn.setContentAreaFilled(false);
        regexBtn.setFocusPainted(false);
        regexBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexbtn_Pressed.png"))); // NOI18N
        regexBtn.setRequestFocusEnabled(false);
        regexBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regexBtnActionPerformed(evt);
            }
        });

        matrixBtn.setBackground(new java.awt.Color(238, 246, 253));
        matrixBtn.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        matrixBtn.setForeground(new java.awt.Color(77, 93, 96));
        matrixBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixBtn.png"))); // NOI18N
        matrixBtn.setBorderPainted(false);
        matrixBtn.setContentAreaFilled(false);
        matrixBtn.setFocusPainted(false);
        matrixBtn.setFocusable(false);
        matrixBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixBtn_pressed.png"))); // NOI18N
        matrixBtn.setRequestFocusEnabled(false);
        matrixBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixBtnActionPerformed(evt);
            }
        });

        logicBtn.setBackground(new java.awt.Color(238, 246, 253));
        logicBtn.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        logicBtn.setForeground(new java.awt.Color(77, 93, 96));
        logicBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/logicBtn.png"))); // NOI18N
        logicBtn.setBorderPainted(false);
        logicBtn.setContentAreaFilled(false);
        logicBtn.setFocusPainted(false);
        logicBtn.setFocusable(false);
        logicBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/logicBtn_pressed.png"))); // NOI18N
        logicBtn.setRequestFocusEnabled(false);
        logicBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logicBtnActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(238, 246, 253));
        jButton5.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(77, 93, 96));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/settingBtn.png"))); // NOI18N
        jButton5.setToolTipText("");
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setEnabled(false);
        jButton5.setFocusPainted(false);
        jButton5.setFocusable(false);
        jButton5.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/settingBtn_pressed.png"))); // NOI18N
        jButton5.setRequestFocusEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sidePanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(welcomeBtn)
                            .addComponent(matrixBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(regexBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(logicBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(sidePanelLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(welcomeBtn)
                .addGap(12, 12, 12)
                .addComponent(regexBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(matrixBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logicBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        bg.add(sidePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 310, 820));

        ContentPanel.setBackground(new java.awt.Color(255, 255, 250));
        ContentPanel.setLayout(new java.awt.CardLayout());

        WelcomePage.setBackground(new java.awt.Color(255, 255, 250));
        WelcomePage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Kailasa", 0, 125)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(67, 73, 121));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/welcomPage.png"))); // NOI18N
        jLabel10.setToolTipText("");
        WelcomePage.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 880, 770));

        ContentPanel.add(WelcomePage, "card2");

        RegexCheckerPanel.setBackground(new java.awt.Color(255, 255, 250));
        RegexCheckerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ResultTextFieldLabel.setFont(new java.awt.Font("Kailasa", 0, 34)); // NOI18N
        ResultTextFieldLabel.setForeground(new java.awt.Color(102, 102, 102));
        RegexCheckerPanel.add(ResultTextFieldLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 590, 130));

        Result_text.setFont(new java.awt.Font("Kailasa", 0, 50)); // NOI18N
        Result_text.setForeground(new java.awt.Color(255, 250, 244));
        Result_text.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/resultLabel.png"))); // NOI18N
        RegexCheckerPanel.add(Result_text, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, -1, 130));

        Result_outerPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexBar1.png"))); // NOI18N
        Result_outerPic.setToolTipText("");
        RegexCheckerPanel.add(Result_outerPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, 610, 150));

        Result_text2.setFont(new java.awt.Font("Kailasa", 0, 50)); // NOI18N
        Result_text2.setForeground(new java.awt.Color(255, 255, 255));
        Result_text2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/inputLabel.png"))); // NOI18N
        RegexCheckerPanel.add(Result_text2, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 510, 190, 100));

        Result_text1.setFont(new java.awt.Font("Kailasa", 0, 50)); // NOI18N
        Result_text1.setForeground(new java.awt.Color(255, 255, 255));
        Result_text1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexLabel.png"))); // NOI18N
        RegexCheckerPanel.add(Result_text1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 330, -1, 100));

        RegexInputTextField.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        RegexInputTextField.setForeground(new java.awt.Color(102, 102, 102));
        RegexInputTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RegexInputTextField.setText("Enter Your Regular Expression Here");
        RegexInputTextField.setToolTipText("");
        RegexInputTextField.setBorder(null);
        RegexInputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegexInputTextFieldActionPerformed(evt);
            }
        });
        RegexCheckerPanel.add(RegexInputTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, 530, 100));

        RegexInnerPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexBar2.png"))); // NOI18N
        RegexCheckerPanel.add(RegexInnerPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 310, 540, 150));

        InputTextField.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        InputTextField.setForeground(new java.awt.Color(102, 102, 102));
        InputTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        InputTextField.setText("Input Here");
        InputTextField.setToolTipText("");
        InputTextField.setBorder(null);
        InputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputTextFieldActionPerformed(evt);
            }
        });
        RegexCheckerPanel.add(InputTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 510, 530, 100));

        InputInnerPic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexBar2.png"))); // NOI18N
        RegexCheckerPanel.add(InputInnerPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 490, 540, 140));

        CheckRegexBtn.setBackground(new java.awt.Color(255, 250, 244));
        CheckRegexBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/checkRgxBtn.png"))); // NOI18N
        CheckRegexBtn.setBorderPainted(false);
        CheckRegexBtn.setContentAreaFilled(false);
        CheckRegexBtn.setFocusPainted(false);
        CheckRegexBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/checkRgxBtn_pressed.png"))); // NOI18N
        CheckRegexBtn.setRequestFocusEnabled(false);
        CheckRegexBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckRegexBtnActionPerformed(evt);
            }
        });
        RegexCheckerPanel.add(CheckRegexBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 670, 190, 110));

        regexinfoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark.png"))); // NOI18N
        regexinfoBtn.setBorderPainted(false);
        regexinfoBtn.setContentAreaFilled(false);
        regexinfoBtn.setFocusPainted(false);
        regexinfoBtn.setFocusable(false);
        regexinfoBtn.setRequestFocusEnabled(false);
        regexinfoBtn.setRolloverEnabled(true);
        regexinfoBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark_pressed.png"))); // NOI18N
        regexinfoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regexinfoBtnActionPerformed(evt);
            }
        });
        RegexCheckerPanel.add(regexinfoBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 740, 50, 50));

        contentBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        RegexCheckerPanel.add(contentBg, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(RegexCheckerPanel, "card3");

        MatrixSelectioinPanel.setBackground(new java.awt.Color(255, 255, 250));
        MatrixSelectioinPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        functionSelectBox.setFont(new java.awt.Font("Kailasa", 0, 24)); // NOI18N
        functionSelectBox.setForeground(new java.awt.Color(193, 193, 193));
        functionSelectBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Add Matrices", "Subtract Matrices", "Multiply Matrices", "Find determinant", "Find Transpose" }));
        functionSelectBox.setAutoscrolls(true);
        functionSelectBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        functionSelectBox.setFocusable(false);
        functionSelectBox.setRequestFocusEnabled(false);
        functionSelectBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionSelectBoxActionPerformed(evt);
            }
        });
        MatrixSelectioinPanel.add(functionSelectBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 600, 130));

        rowSizeBox.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        rowSizeBox.setForeground(new java.awt.Color(193, 193, 193));
        rowSizeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        rowSizeBox.setFocusable(false);
        rowSizeBox.setRequestFocusEnabled(false);
        MatrixSelectioinPanel.add(rowSizeBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 330, 530, 110));

        columnSizeBox.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        columnSizeBox.setForeground(new java.awt.Color(193, 193, 193));
        columnSizeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));
        columnSizeBox.setFocusable(false);
        columnSizeBox.setRequestFocusEnabled(false);
        columnSizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                columnSizeBoxActionPerformed(evt);
            }
        });
        MatrixSelectioinPanel.add(columnSizeBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 510, 530, 100));

        matrixConfirmBtn.setBackground(new java.awt.Color(255, 250, 244));
        matrixConfirmBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/confirmBtn.png"))); // NOI18N
        matrixConfirmBtn.setActionCommand("Confirm");
        matrixConfirmBtn.setBorderPainted(false);
        matrixConfirmBtn.setContentAreaFilled(false);
        matrixConfirmBtn.setFocusPainted(false);
        matrixConfirmBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/confirmBtn_pressed.png"))); // NOI18N
        matrixConfirmBtn.setRequestFocusEnabled(false);
        matrixConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixConfirmBtnActionPerformed(evt);
            }
        });
        MatrixSelectioinPanel.add(matrixConfirmBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 670, 190, 110));

        matrixinfo_Btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark.png"))); // NOI18N
        matrixinfo_Btn.setBorderPainted(false);
        matrixinfo_Btn.setContentAreaFilled(false);
        matrixinfo_Btn.setFocusPainted(false);
        matrixinfo_Btn.setFocusable(false);
        matrixinfo_Btn.setRequestFocusEnabled(false);
        matrixinfo_Btn.setRolloverEnabled(true);
        matrixinfo_Btn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark_pressed.png"))); // NOI18N
        matrixinfo_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixinfo_BtnActionPerformed(evt);
            }
        });
        MatrixSelectioinPanel.add(matrixinfo_Btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 740, 50, 50));

        Result_outerPic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexBar1.png"))); // NOI18N
        Result_outerPic1.setToolTipText("");
        MatrixSelectioinPanel.add(Result_outerPic1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 90, 610, 150));

        InputInnerPic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexBar2.png"))); // NOI18N
        MatrixSelectioinPanel.add(InputInnerPic1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 490, 540, 140));

        RegexInnerPic1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexBar2.png"))); // NOI18N
        MatrixSelectioinPanel.add(RegexInnerPic1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 310, 540, 150));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixSelection3.png"))); // NOI18N
        MatrixSelectioinPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 510, 210, 100));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixSelction1.png"))); // NOI18N
        MatrixSelectioinPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 290, 100));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixSelection2.png"))); // NOI18N
        MatrixSelectioinPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 340, 210, 100));

        contentBg1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        MatrixSelectioinPanel.add(contentBg1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(MatrixSelectioinPanel, "card3");

        MatrixPanel.setBackground(new java.awt.Color(255, 255, 250));
        MatrixPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixLabel2.png"))); // NOI18N
        MatrixPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 240, 110, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixLabel1.png"))); // NOI18N
        MatrixPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 110, -1));

        tipLabel.setBackground(new java.awt.Color(236, 236, 236));
        tipLabel.setFont(new java.awt.Font("Kailasa", 0, 24)); // NOI18N
        tipLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tipLabel.setText("Tip label");
        MatrixPanel.add(tipLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 870, 70));

        tipLabel_bg.setFont(new java.awt.Font("Kailasa", 0, 24)); // NOI18N
        tipLabel_bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/tipBar.png"))); // NOI18N
        MatrixPanel.add(tipLabel_bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 910, 70));

        matrixlabel3.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        matrixlabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        matrixlabel3.setText("jLabel8");
        MatrixPanel.add(matrixlabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, 210, 20));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixResultLabel.png"))); // NOI18N
        MatrixPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 420, 220, 60));

        matrixinfo_Btn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark.png"))); // NOI18N
        matrixinfo_Btn1.setBorderPainted(false);
        matrixinfo_Btn1.setContentAreaFilled(false);
        matrixinfo_Btn1.setFocusPainted(false);
        matrixinfo_Btn1.setFocusable(false);
        matrixinfo_Btn1.setRequestFocusEnabled(false);
        matrixinfo_Btn1.setRolloverEnabled(true);
        matrixinfo_Btn1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark_pressed.png"))); // NOI18N
        matrixinfo_Btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matrixinfo_Btn1ActionPerformed(evt);
            }
        });
        MatrixPanel.add(matrixinfo_Btn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 740, 50, 50));

        matrix1Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(matrix1Table);

        MatrixPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 340, 270));

        matrix2Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(matrix2Table);

        MatrixPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 120, 340, 270));

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(resultTable);

        MatrixPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 430, 420, 370));

        checkBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/checkBtn.png"))); // NOI18N
        checkBtn.setBorderPainted(false);
        checkBtn.setContentAreaFilled(false);
        checkBtn.setFocusPainted(false);
        checkBtn.setFocusable(false);
        checkBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/checkBtn_pressed.png"))); // NOI18N
        checkBtn.setRequestFocusEnabled(false);
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });
        MatrixPanel.add(checkBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 540, 190, 110));

        returnBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/backArrow.png"))); // NOI18N
        returnBtn.setBorderPainted(false);
        returnBtn.setContentAreaFilled(false);
        returnBtn.setFocusPainted(false);
        returnBtn.setFocusable(false);
        returnBtn.setRequestFocusEnabled(false);
        returnBtn.setRolloverEnabled(true);
        returnBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/backArrow_pressed.png"))); // NOI18N
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });
        MatrixPanel.add(returnBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, 70));

        contentBg2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        MatrixPanel.add(contentBg2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(MatrixPanel, "card3");

        logicSelectionPage.setBackground(new java.awt.Color(255, 255, 250));
        logicSelectionPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        toTruthTableBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/Asset 4.png"))); // NOI18N
        toTruthTableBtn.setBorderPainted(false);
        toTruthTableBtn.setContentAreaFilled(false);
        toTruthTableBtn.setFocusPainted(false);
        toTruthTableBtn.setFocusable(false);
        toTruthTableBtn.setRequestFocusEnabled(false);
        toTruthTableBtn.setRolloverEnabled(true);
        toTruthTableBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/Asset 4_pressed.png"))); // NOI18N
        toTruthTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toTruthTableBtnActionPerformed(evt);
            }
        });
        logicSelectionPage.add(toTruthTableBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 260, 250, 250));

        toEnglishselctionBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/Asset 3.png"))); // NOI18N
        toEnglishselctionBtn.setBorderPainted(false);
        toEnglishselctionBtn.setContentAreaFilled(false);
        toEnglishselctionBtn.setFocusPainted(false);
        toEnglishselctionBtn.setFocusable(false);
        toEnglishselctionBtn.setRequestFocusEnabled(false);
        toEnglishselctionBtn.setRolloverEnabled(true);
        toEnglishselctionBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/Asset 3_pressed.png"))); // NOI18N
        toEnglishselctionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toEnglishselctionBtnActionPerformed(evt);
            }
        });
        logicSelectionPage.add(toEnglishselctionBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, 250, 250));

        contentBg4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        logicSelectionPage.add(contentBg4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(logicSelectionPage, "card3");

        logicToEnglshPanel.setBackground(new java.awt.Color(255, 255, 250));
        logicToEnglshPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logicinfoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark.png"))); // NOI18N
        logicinfoBtn.setBorderPainted(false);
        logicinfoBtn.setContentAreaFilled(false);
        logicinfoBtn.setFocusPainted(false);
        logicinfoBtn.setFocusable(false);
        logicinfoBtn.setRequestFocusEnabled(false);
        logicinfoBtn.setRolloverEnabled(true);
        logicinfoBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark_pressed.png"))); // NOI18N
        logicinfoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logicinfoBtnActionPerformed(evt);
            }
        });
        logicToEnglshPanel.add(logicinfoBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 740, 50, 50));

        toEnglishinputFiled.setFont(new java.awt.Font("Kailasa", 0, 14)); // NOI18N
        toEnglishinputFiled.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        toEnglishinputFiled.setText("Enter Here");
        toEnglishinputFiled.setBorder(null);
        logicToEnglshPanel.add(toEnglishinputFiled, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 600, 40));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 1.png"))); // NOI18N
        logicToEnglshPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 640, -1));

        toEngish_JTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        toEnglish_Table.setViewportView(toEngish_JTable);

        logicToEnglshPanel.add(toEnglish_Table, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 120, 780, 420));

        toEnglish_confirmBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 3.png"))); // NOI18N
        toEnglish_confirmBtn.setBorder(null);
        toEnglish_confirmBtn.setBorderPainted(false);
        toEnglish_confirmBtn.setContentAreaFilled(false);
        toEnglish_confirmBtn.setFocusPainted(false);
        toEnglish_confirmBtn.setFocusable(false);
        toEnglish_confirmBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/confirm_pressed.png"))); // NOI18N
        toEnglish_confirmBtn.setRequestFocusEnabled(false);
        toEnglish_confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toEnglish_confirmBtnActionPerformed(evt);
            }
        });
        logicToEnglshPanel.add(toEnglish_confirmBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 290, 110, 60));

        inputFinishedBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 2.png"))); // NOI18N
        inputFinishedBtn1.setBorder(null);
        inputFinishedBtn1.setBorderPainted(false);
        inputFinishedBtn1.setContentAreaFilled(false);
        inputFinishedBtn1.setFocusPainted(false);
        inputFinishedBtn1.setFocusable(false);
        inputFinishedBtn1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/inputFinished_pressed.png"))); // NOI18N
        inputFinishedBtn1.setRequestFocusEnabled(false);
        inputFinishedBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFinishedBtn1ActionPerformed(evt);
            }
        });
        logicToEnglshPanel.add(inputFinishedBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 30, 200, 60));

        toEnglish_label1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 6.png"))); // NOI18N
        logicToEnglshPanel.add(toEnglish_label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 550, 280, 80));

        toEnglish_TextArea.setEditable(false);
        toEnglish_TextArea.setColumns(20);
        toEnglish_TextArea.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        toEnglish_TextArea.setRows(5);
        toEnglish_TextArea.setBorder(null);
        toEnglish_TextArea.setDoubleBuffered(true);
        toEnglish_TextArea.setFocusable(false);
        toEnglish_TextArea.setRequestFocusEnabled(false);
        jScrollPane4.setViewportView(toEnglish_TextArea);

        logicToEnglshPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 610, 730, 180));

        textArea_bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 9.png"))); // NOI18N
        logicToEnglshPanel.add(textArea_bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 600, -1, -1));

        logicReturnBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4.png"))); // NOI18N
        logicReturnBtn1.setBorderPainted(false);
        logicReturnBtn1.setContentAreaFilled(false);
        logicReturnBtn1.setFocusPainted(false);
        logicReturnBtn1.setFocusable(false);
        logicReturnBtn1.setRequestFocusEnabled(false);
        logicReturnBtn1.setRolloverEnabled(true);
        logicReturnBtn1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4_pressed.png"))); // NOI18N
        logicReturnBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logicReturnBtn1ActionPerformed(evt);
            }
        });
        logicToEnglshPanel.add(logicReturnBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 50, -1));

        contentBg3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        logicToEnglshPanel.add(contentBg3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(logicToEnglshPanel, "card3");

        truthTablePanel.setBackground(new java.awt.Color(255, 255, 250));
        truthTablePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logicinfoBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark.png"))); // NOI18N
        logicinfoBtn1.setBorderPainted(false);
        logicinfoBtn1.setContentAreaFilled(false);
        logicinfoBtn1.setFocusPainted(false);
        logicinfoBtn1.setFocusable(false);
        logicinfoBtn1.setRequestFocusEnabled(false);
        logicinfoBtn1.setRolloverEnabled(true);
        logicinfoBtn1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/qmark_pressed.png"))); // NOI18N
        logicinfoBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logicinfoBtn1ActionPerformed(evt);
            }
        });
        truthTablePanel.add(logicinfoBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 740, 50, 50));

        truthTableinputFiled1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        truthTableinputFiled1.setText("Enter Here");
        truthTableinputFiled1.setBorder(null);
        truthTablePanel.add(truthTableinputFiled1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 600, 40));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 1.png"))); // NOI18N
        truthTablePanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 30, 640, 60));

        truthTable_JTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        toEnglish_Table1.setViewportView(truthTable_JTable1);

        truthTablePanel.add(toEnglish_Table1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 110, 320, 420));

        truthTable_JTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        toEnglish_Table2.setViewportView(truthTable_JTable2);

        truthTablePanel.add(toEnglish_Table2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 330, 420));

        fillTableBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/fillBtn.png"))); // NOI18N
        fillTableBtn.setBorderPainted(false);
        fillTableBtn.setContentAreaFilled(false);
        fillTableBtn.setFocusPainted(false);
        fillTableBtn.setFocusable(false);
        fillTableBtn.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/fill_pressed.png"))); // NOI18N
        fillTableBtn.setRequestFocusEnabled(false);
        fillTableBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillTableBtnActionPerformed(evt);
            }
        });
        truthTablePanel.add(fillTableBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 290, 110, 60));

        truthTable_confirmBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 3.png"))); // NOI18N
        truthTable_confirmBtn1.setBorder(null);
        truthTable_confirmBtn1.setBorderPainted(false);
        truthTable_confirmBtn1.setContentAreaFilled(false);
        truthTable_confirmBtn1.setFocusPainted(false);
        truthTable_confirmBtn1.setFocusable(false);
        truthTable_confirmBtn1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/confirm_pressed.png"))); // NOI18N
        truthTable_confirmBtn1.setRequestFocusEnabled(false);
        truthTable_confirmBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truthTable_confirmBtn1ActionPerformed(evt);
            }
        });
        truthTablePanel.add(truthTable_confirmBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 290, 110, 60));

        inputFinishedBtn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 2.png"))); // NOI18N
        inputFinishedBtn2.setBorder(null);
        inputFinishedBtn2.setBorderPainted(false);
        inputFinishedBtn2.setContentAreaFilled(false);
        inputFinishedBtn2.setFocusPainted(false);
        inputFinishedBtn2.setFocusable(false);
        inputFinishedBtn2.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/inputFinished_pressed.png"))); // NOI18N
        inputFinishedBtn2.setRequestFocusEnabled(false);
        inputFinishedBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFinishedBtn2ActionPerformed(evt);
            }
        });
        truthTablePanel.add(inputFinishedBtn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 30, 200, 60));

        toEnglish_label2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 12.png"))); // NOI18N
        truthTablePanel.add(toEnglish_label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 540, 280, 80));

        truthTable_TextArea.setEditable(false);
        truthTable_TextArea.setColumns(20);
        truthTable_TextArea.setFont(new java.awt.Font("Kailasa", 0, 18)); // NOI18N
        truthTable_TextArea.setRows(5);
        truthTable_TextArea.setBorder(null);
        truthTable_TextArea.setDoubleBuffered(true);
        truthTable_TextArea.setFocusable(false);
        truthTable_TextArea.setRequestFocusEnabled(false);
        jScrollPane5.setViewportView(truthTable_TextArea);

        truthTablePanel.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 600, 730, 180));

        textArea_bg1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 9.png"))); // NOI18N
        truthTablePanel.add(textArea_bg1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 590, -1, -1));

        logicReturnBtn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4.png"))); // NOI18N
        logicReturnBtn2.setBorderPainted(false);
        logicReturnBtn2.setContentAreaFilled(false);
        logicReturnBtn2.setFocusPainted(false);
        logicReturnBtn2.setFocusable(false);
        logicReturnBtn2.setRequestFocusEnabled(false);
        logicReturnBtn2.setRolloverEnabled(true);
        logicReturnBtn2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4_pressed.png"))); // NOI18N
        logicReturnBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logicReturnBtn2ActionPerformed(evt);
            }
        });
        truthTablePanel.add(logicReturnBtn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 50, -1));

        contentBg5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        truthTablePanel.add(contentBg5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(truthTablePanel, "card3");

        regexInfoPanel.setBackground(new java.awt.Color(255, 255, 250));
        regexInfoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infoReturnBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4.png"))); // NOI18N
        infoReturnBtn.setBorderPainted(false);
        infoReturnBtn.setContentAreaFilled(false);
        infoReturnBtn.setFocusPainted(false);
        infoReturnBtn.setFocusable(false);
        infoReturnBtn.setRequestFocusEnabled(false);
        infoReturnBtn.setRolloverEnabled(true);
        infoReturnBtn.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4_pressed.png"))); // NOI18N
        infoReturnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoReturnBtnActionPerformed(evt);
            }
        });
        regexInfoPanel.add(infoReturnBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 50, -1));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/regexInfo.png"))); // NOI18N
        regexInfoPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 820, 750));

        contentBg6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        regexInfoPanel.add(contentBg6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(regexInfoPanel, "card3");

        matrixInfoPanel.setBackground(new java.awt.Color(255, 255, 250));
        matrixInfoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infoReturnBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4.png"))); // NOI18N
        infoReturnBtn1.setBorderPainted(false);
        infoReturnBtn1.setContentAreaFilled(false);
        infoReturnBtn1.setFocusPainted(false);
        infoReturnBtn1.setFocusable(false);
        infoReturnBtn1.setRequestFocusEnabled(false);
        infoReturnBtn1.setRolloverEnabled(true);
        infoReturnBtn1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4_pressed.png"))); // NOI18N
        infoReturnBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoReturnBtn1ActionPerformed(evt);
            }
        });
        matrixInfoPanel.add(infoReturnBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 50, -1));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/matrixInfo.png"))); // NOI18N
        matrixInfoPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 820, 750));

        contentBg7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        matrixInfoPanel.add(contentBg7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(matrixInfoPanel, "card3");

        ToEnglishInfoPanel.setBackground(new java.awt.Color(255, 255, 250));
        ToEnglishInfoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infoReturnBtn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4.png"))); // NOI18N
        infoReturnBtn2.setBorderPainted(false);
        infoReturnBtn2.setContentAreaFilled(false);
        infoReturnBtn2.setFocusPainted(false);
        infoReturnBtn2.setFocusable(false);
        infoReturnBtn2.setRequestFocusEnabled(false);
        infoReturnBtn2.setRolloverEnabled(true);
        infoReturnBtn2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4_pressed.png"))); // NOI18N
        infoReturnBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoReturnBtn2ActionPerformed(evt);
            }
        });
        ToEnglishInfoPanel.add(infoReturnBtn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 50, -1));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/toEnglishInfo.png"))); // NOI18N
        ToEnglishInfoPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 820, 750));

        contentBg8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        ToEnglishInfoPanel.add(contentBg8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(ToEnglishInfoPanel, "card3");

        truthTableInfoPanel1.setBackground(new java.awt.Color(255, 255, 250));
        truthTableInfoPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        infoReturnBtn3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4.png"))); // NOI18N
        infoReturnBtn3.setBorderPainted(false);
        infoReturnBtn3.setContentAreaFilled(false);
        infoReturnBtn3.setFocusPainted(false);
        infoReturnBtn3.setFocusable(false);
        infoReturnBtn3.setRequestFocusEnabled(false);
        infoReturnBtn3.setRolloverEnabled(true);
        infoReturnBtn3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logic/1x/Asset 4_pressed.png"))); // NOI18N
        infoReturnBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoReturnBtn3ActionPerformed(evt);
            }
        });
        truthTableInfoPanel1.add(infoReturnBtn3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 410, 50, -1));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/truthTableInfo.png"))); // NOI18N
        truthTableInfoPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 820, 750));

        contentBg9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/1x/contentBg.png"))); // NOI18N
        truthTableInfoPanel1.add(contentBg9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 1000, 820));

        ContentPanel.add(truthTableInfoPanel1, "card3");

        bg.add(ContentPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, 1050, 820));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void logicBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logicBtnActionPerformed
        switchPanel(logicSelectionPage);
        refresh();
    }//GEN-LAST:event_logicBtnActionPerformed

    private void welcomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomeBtnActionPerformed
        switchPanel(WelcomePage);
        refresh();
    }//GEN-LAST:event_welcomeBtnActionPerformed

    private void CheckRegexBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckRegexBtnActionPerformed
        String message = regexModel.match(RegexInputTextField.getText(),InputTextField.getText()); 
        ResultTextFieldLabel.setText(message);
        refresh();
    }//GEN-LAST:event_CheckRegexBtnActionPerformed

    private void InputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputTextFieldActionPerformed

    private void RegexInputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegexInputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegexInputTextFieldActionPerformed

    private void matrixBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixBtnActionPerformed
        switchPanel(MatrixSelectioinPanel);
        refresh();
    }//GEN-LAST:event_matrixBtnActionPerformed

    private void columnSizeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_columnSizeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_columnSizeBoxActionPerformed

    private void regexBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexBtnActionPerformed
        switchPanel(RegexCheckerPanel);
        refresh();
    }//GEN-LAST:event_regexBtnActionPerformed

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        checkAnswer();
    }//GEN-LAST:event_checkBtnActionPerformed

    private void functionSelectBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionSelectBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_functionSelectBoxActionPerformed

    private void matrixConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixConfirmBtnActionPerformed
        displayMatrices();
        switchPanel(MatrixPanel);
        refresh();
    }//GEN-LAST:event_matrixConfirmBtnActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        switchPanel(MatrixSelectioinPanel);
        refresh();
    }//GEN-LAST:event_returnBtnActionPerformed

    private void logicReturnBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logicReturnBtn1ActionPerformed
        switchPanel(logicSelectionPage);
        refresh();
    }//GEN-LAST:event_logicReturnBtn1ActionPerformed

    private void toEnglishselctionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toEnglishselctionBtnActionPerformed

        switchPanel(logicToEnglshPanel);
        refresh();
    }//GEN-LAST:event_toEnglishselctionBtnActionPerformed

    private void inputFinishedBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFinishedBtn1ActionPerformed

        updateToEnglish();    
        refresh();
    }//GEN-LAST:event_inputFinishedBtn1ActionPerformed

    private void toEnglish_confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toEnglish_confirmBtnActionPerformed
        
        TEmodel.English=new StringBuilder(TEmodel.logging);
         if(toEngish_JTable.getEditingRow()!=-1) {
                  toEngish_JTable.getCellEditor(toEngish_JTable.getEditingRow(), toEngish_JTable.getEditingColumn()).stopCellEditing();
                }
                int offset = 0;
                for (int i = 0; i < TEmodel.letter.size(); i++) {
                     ArrayList<Integer> indexarray = TEmodel.index.get(TEmodel.letter.get(i));
                     for (int j = 0; j < indexarray.size(); j++) {

                         TEmodel.English.replace(indexarray.get(j) + offset, offset + indexarray.get(j) + 1, (String) toEngish_JTable.getValueAt(0, i));
                            offset += ((String) toEngish_JTable.getValueAt(0, i)).length() - 1;


                                 }
                       }
        TEmodel.getout();
        toEnglish_TextArea.setText(String.valueOf(TEmodel.English)+"\n");

        refresh();
    }//GEN-LAST:event_toEnglish_confirmBtnActionPerformed

    private void fillTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillTableBtnActionPerformed
            
        updateTruthTablePanel();
        
        //truthTable_confirmBtn1.setEnabled(true);
        
        refresh();
    }//GEN-LAST:event_fillTableBtnActionPerformed

    private void inputFinishedBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFinishedBtn2ActionPerformed
        
        model = new Turthtable(truthTableinputFiled1.getText());

        permu = new JTable(new String[(int) Math.pow(2, model.lettersize)][model.lettersize], model.singleformular.toArray());

        
        for (int h = 0; h < permu.getRowCount(); h++) {
            permu.setRowHeight(h, 100);
        }
        permu.setValueAt("enter all permutation for each letter(0 or1)",0,0);
        permu.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);


        TableModel curModel = permu.getModel();
        truthTable_JTable2.setModel(curModel);

        //fillTableBtn.setEnabled(true);
        
        refresh();
                
                
    }//GEN-LAST:event_inputFinishedBtn2ActionPerformed

    private void logicReturnBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logicReturnBtn2ActionPerformed
        switchPanel(logicSelectionPage);
        refresh();
    }//GEN-LAST:event_logicReturnBtn2ActionPerformed

    private void toTruthTableBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toTruthTableBtnActionPerformed
        
        
        truthTable_JTable1.setModel(new notEditableTableModel());
        truthTable_JTable2.setModel(new notEditableTableModel());
        
        //fillTableBtn.setEnabled(false);
        
        //truthTable_confirmBtn1.setEnabled(false);
        
        switchPanel(truthTablePanel);
        refresh();
    }//GEN-LAST:event_toTruthTableBtnActionPerformed

    private void truthTable_confirmBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_truthTable_confirmBtn1ActionPerformed
        
        if (!(permu.getEditingRow()==-1)) {
            truthTable_JTable1.getCellEditor(truthTable_JTable1.getEditingRow(), truthTable_JTable1.getEditingColumn()).stopCellEditing();
        }
        Boolean well=true;
        for (int i=0;i<(int) Math.pow(2, model.lettersize);i++){
            for (int j=0;j<model.formularsize-1;j++){
                if (!(truthTable_JTable1.getValueAt(i,j).equals(model.correct[i][j]))){
                    truthTable_TextArea.setText("the answer in "+i +"row "+j +"column  is wrong + \n" );
                    well=false;
                }
            }
        }
        if (well==true){
            truthTable_TextArea.setText("well done all right");
        }
    }//GEN-LAST:event_truthTable_confirmBtn1ActionPerformed

    private void matrixinfo_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixinfo_BtnActionPerformed
        prevPanel = MatrixSelectioinPanel;
        switchPanel(matrixInfoPanel);
        refresh();
    }//GEN-LAST:event_matrixinfo_BtnActionPerformed

    private void matrixinfo_Btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matrixinfo_Btn1ActionPerformed
        prevPanel = MatrixPanel;
        switchPanel(matrixInfoPanel);
        refresh();      
    }//GEN-LAST:event_matrixinfo_Btn1ActionPerformed

    private void logicinfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logicinfoBtnActionPerformed
        prevPanel = logicToEnglshPanel;
        switchPanel(ToEnglishInfoPanel);
        refresh();
    }//GEN-LAST:event_logicinfoBtnActionPerformed

    private void logicinfoBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logicinfoBtn1ActionPerformed
        prevPanel = truthTablePanel;
        switchPanel(truthTableInfoPanel1);
        refresh();
    }//GEN-LAST:event_logicinfoBtn1ActionPerformed

    private void regexinfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regexinfoBtnActionPerformed
        
        prevPanel = RegexCheckerPanel;
        switchPanel(regexInfoPanel);
        refresh();
        
    }//GEN-LAST:event_regexinfoBtnActionPerformed

    private void infoReturnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoReturnBtnActionPerformed

        switchPanel(prevPanel);
        refresh();
    }//GEN-LAST:event_infoReturnBtnActionPerformed

    private void infoReturnBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoReturnBtn1ActionPerformed
        switchPanel(prevPanel);
        refresh();
    }//GEN-LAST:event_infoReturnBtn1ActionPerformed

    private void infoReturnBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoReturnBtn2ActionPerformed
        switchPanel(prevPanel);
        refresh();
    }//GEN-LAST:event_infoReturnBtn2ActionPerformed

    private void infoReturnBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoReturnBtn3ActionPerformed
        switchPanel(prevPanel);
        refresh();
    }//GEN-LAST:event_infoReturnBtn3ActionPerformed

    private void updateTruthTablePanel() {
        
        if (!(permu.getEditingRow()==-1)) {
           permu.getCellEditor(permu.getEditingRow(), permu.getEditingColumn()).stopCellEditing();
        }
        
        model.permu = permu;
        model.produceturth();
        
        evaluate = new JTable(new String[(int) Math.pow(2, model.lettersize)][model.formularsize-1],model.display);
        for (int h = 0; h < evaluate.getRowCount(); h++) {
            evaluate.setRowHeight(h, 100);
        }
        evaluate.setValueAt("start to fill in",0,0);
        
        truthTable_JTable1.setModel(evaluate.getModel());               
    }
    
    private void updateToEnglish() {
        
        TEmodel = new ToEnglish(toEnglishinputFiled.getText());
        System.out.println(toEnglishinputFiled.getText());

        DefaultTableModel model=new DefaultTableModel(new String[1][    TEmodel.letter.size()],TEmodel.letter.toArray());
        toEngish_JTable.setModel(model);

        for (int h = 0; h < toEngish_JTable.getRowCount(); h++) {
            toEngish_JTable.setRowHeight(h, 100);
        }
        toEngish_JTable.setValueAt("enter the meaning for formular letter",0,0);
             
    }
    
    
    
    private void switchPanel(JPanel panel) {
        ContentPanel.removeAll();
        ContentPanel.repaint();
        ContentPanel.revalidate();
        ContentPanel.add(panel);
        ContentPanel.repaint();
        ContentPanel.revalidate();
    }
    
    
    private void displayMatrices(){
        if(functionSelectBox.getSelectedItem().toString().equals("Find determinant")){
            if(Integer.parseInt(rowSizeBox.getSelectedItem().toString()) != Integer.parseInt(columnSizeBox.getSelectedItem().toString())){
                return;
            }
        }
        updateTipLabel();
        updateMatricesPanel();
    }
    
    private void updateTipLabel() {
    
        String userSelect = functionSelectBox.getSelectedItem().toString();

        switch (userSelect) {
            case "Add Matrices" -> tipLabel.setText("Tips : add numbers together at the same position. x11 + y11 = z11");
            case "Subtract Matrices" -> tipLabel.setText("Tips : subtract numbers at the same position. x11 - y11 = z11");
            case "Multiply Matrices" -> tipLabel.setText("Tips : multiply a row with a column. x11 = row1 * col1");
            case "Find determinant" -> tipLabel.setText("Tips : find determinant by Gaussian Elimination.");
            case "Find Transpose" -> tipLabel.setText("Tips : exchange every row with column. row1 = column1");
        }
    }
    
    private void updateMatricesPanel() {
        
        String userSelect = functionSelectBox.getSelectedItem().toString();
        int rowNumber = Integer.parseInt(rowSizeBox.getSelectedItem().toString());
        int columnNumber = Integer.parseInt(columnSizeBox.getSelectedItem().toString());

        if(userSelect.equals("Add Matrices") || userSelect.equals("Subtract Matrices")){
            //matricesPanel = new JPanel(new GridLayout(3, 2, 0, 0));

            Float[] columns = new Float[columnNumber];

            Float[][] matrix1Data = new Float[rowNumber][columnNumber];
            Float[][] matrix2Data = new Float[rowNumber][columnNumber];
            Float[][] resultData = new Float[rowNumber][columnNumber];

            Matrix matrix1 = new Matrix(rowNumber, columnNumber);
            Matrix matrix2 = new Matrix(rowNumber, columnNumber);
            ArrayList<ArrayList<Float>> matrix1Array = matrix1.getMatrix();
            ArrayList<ArrayList<Float>> matrix2Array = matrix2.getMatrix();

            for(int rowIndex = 0; rowIndex < rowNumber; rowIndex++){
                ArrayList<Float> row1 = matrix1Array.get(rowIndex);
                ArrayList<Float> row2 = matrix2Array.get(rowIndex);
                for(int columnIndex = 0; columnIndex < columnNumber; columnIndex++){
                    matrix1Data[rowIndex][columnIndex] = row1.get(columnIndex);
                    matrix2Data[rowIndex][columnIndex] = row2.get(columnIndex);
                }
            }


            DefaultTableModel matrixModel1 = new DefaultTableModel(matrix1Data, columns);
            
            matrix1Table.setModel(matrixModel1);

            DefaultTableModel matrixModel2 = new DefaultTableModel(matrix2Data, columns);
            
            matrix2Table.setModel(matrixModel2);
            
            resultModel = new DefaultTableModel(resultData, columns);


            if(userSelect.equals("Add Matrices")){
                
                matrixlabel3.setText("Add to:");
                
                
                resultMatrix = this.matrixModel.addMatrices(matrix1, matrix2);
                
            }else{
                
                matrixlabel3.setText("Subtract to:");

                resultMatrix = this.matrixModel.subtractMatrices(matrix1, matrix2);
            }

        }else if(userSelect.equals("Multiply Matrices")){
            //matricesPanel = new JPanel(new GridLayout(3, 2, 0, 0));

            Float[] columns1 = new Float[columnNumber];
            Float[] columns2 = new Float[rowNumber];

            Float[][] matrix1Data = new Float[rowNumber][columnNumber];
            Float[][] matrix2Data = new Float[columnNumber][rowNumber];
            Float[][] resultData = new Float[rowNumber][rowNumber];

            Matrix matrix1 = new Matrix(rowNumber, columnNumber);
            Matrix matrix2 = new Matrix(columnNumber, rowNumber);
            ArrayList<ArrayList<Float>> matrix1Array = matrix1.getMatrix();
            ArrayList<ArrayList<Float>> matrix2Array = matrix2.getMatrix();

            for(int rowIndex = 0; rowIndex < rowNumber; rowIndex++){
                ArrayList<Float> row = matrix1Array.get(rowIndex);
                for(int columnIndex = 0; columnIndex < columnNumber; columnIndex++){
                    matrix1Data[rowIndex][columnIndex] = row.get(columnIndex);
                }
            }

            for(int rowIndex = 0; rowIndex < columnNumber; rowIndex++){
                ArrayList<Float> row = matrix2Array.get(rowIndex);
                for(int columnIndex = 0; columnIndex < rowNumber; columnIndex++){
                    matrix2Data[rowIndex][columnIndex] = row.get(columnIndex);
                }
            }


            DefaultTableModel matrixModel1 = new DefaultTableModel(matrix1Data, columns1);
            matrix1Table.setModel(matrixModel1);

            DefaultTableModel matrixModel2 = new DefaultTableModel(matrix2Data, columns2);
            matrix1Table.setModel(matrixModel2);

            resultModel = new DefaultTableModel(resultData, columns2);
            resultMatrix = this.matrixModel.multiplyMatrices(matrix1, matrix2);

            
            matrixlabel3.setText("Multiply to:");

        } else if(userSelect.equals("Find determinant") || userSelect.equals("Find Transpose")){


            Float[] columns1 = new Float[columnNumber];

            Float[][] matrixData = new Float[rowNumber][columnNumber];

            Matrix testMatrix = new Matrix(rowNumber, columnNumber);

            if(userSelect.equals("Find determinant")){
                while(true){
                    if(this.matrixModel.hasDeterminant(testMatrix)){
                        break;
                    }
                    testMatrix = new Matrix(rowNumber, columnNumber);
                }

                resultModel = new DefaultTableModel(new Float[1][1], new Float[1]);
                resultMatrix = this.matrixModel.findDeterminant(testMatrix);
            }else{
                resultModel = new DefaultTableModel(new Float[columnNumber][rowNumber], new Float[rowNumber]);
                resultMatrix = this.matrixModel.findTranspose(testMatrix);
            }

            ArrayList<ArrayList<Float>> matrix = testMatrix.getMatrix();

            for(int rowIndex = 0; rowIndex < rowNumber; rowIndex++){
                ArrayList<Float> row = matrix.get(rowIndex);
                for(int columnIndex = 0; columnIndex < columnNumber; columnIndex++){
                    matrixData[rowIndex][columnIndex] = row.get(columnIndex);
                }
            }


            DefaultTableModel matrixModel1 = new DefaultTableModel(matrixData, columns1);
            matrix1Table.setModel(matrixModel1);
                        
           
            matrix2Table.setModel(new notEditableTableModel());
            
            
            if(userSelect.equals("Find determinant")){
                matrixlabel3.setText("Determinant:");
            }else{
                matrixlabel3.setText("Transpose:");
            }
            
        }

        
        resultTable.setModel(resultModel);
    }
    
    private void checkAnswer(){
            
        int rowNumber = resultMatrix.getRowNumber();
        int columnNumber = resultMatrix.getColumnNumber();
        
        for(int rowIndex = 0; rowIndex < rowNumber; rowIndex++){
            ArrayList<Float> row = resultMatrix.getRow(rowIndex);
            for(int columnIndex = 0; columnIndex < columnNumber; columnIndex++){
                float result;
                if(resultModel.getValueAt(rowIndex, columnIndex) == null){
                    result = 0f;
                }else{
                    result = Float.parseFloat(resultModel.getValueAt(rowIndex, columnIndex).toString());
                }

                float answer = row.get(columnIndex);
                if(!((int) answer == (int) result)){
                    tipLabel.setText("Wrong answer! You can try again!");
                    return;
                }
            }
        }

        tipLabel.setText("Congratulation!");
    }
    
   
    private void refresh(){
        this.invalidate();
        this.validate();
        this.repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {  
                //System.out.println(getClass());
                new MainFrame().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckRegexBtn;
    private javax.swing.JPanel ContentPanel;
    private javax.swing.JLabel InputInnerPic;
    private javax.swing.JLabel InputInnerPic1;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JPanel MatrixPanel;
    private javax.swing.JPanel MatrixSelectioinPanel;
    private javax.swing.JPanel RegexCheckerPanel;
    private javax.swing.JLabel RegexInnerPic;
    private javax.swing.JLabel RegexInnerPic1;
    private javax.swing.JTextField RegexInputTextField;
    private javax.swing.JLabel ResultTextFieldLabel;
    private javax.swing.JLabel Result_outerPic;
    private javax.swing.JLabel Result_outerPic1;
    private javax.swing.JLabel Result_text;
    private javax.swing.JLabel Result_text1;
    private javax.swing.JLabel Result_text2;
    private javax.swing.JPanel ToEnglishInfoPanel;
    private javax.swing.JPanel WelcomePage;
    private javax.swing.JPanel bg;
    private javax.swing.JButton checkBtn;
    private javax.swing.JComboBox<String> columnSizeBox;
    private javax.swing.JLabel contentBg;
    private javax.swing.JLabel contentBg1;
    private javax.swing.JLabel contentBg2;
    private javax.swing.JLabel contentBg3;
    private javax.swing.JLabel contentBg4;
    private javax.swing.JLabel contentBg5;
    private javax.swing.JLabel contentBg6;
    private javax.swing.JLabel contentBg7;
    private javax.swing.JLabel contentBg8;
    private javax.swing.JLabel contentBg9;
    private javax.swing.JButton fillTableBtn;
    private javax.swing.JComboBox<String> functionSelectBox;
    private javax.swing.JButton infoReturnBtn;
    private javax.swing.JButton infoReturnBtn1;
    private javax.swing.JButton infoReturnBtn2;
    private javax.swing.JButton infoReturnBtn3;
    private javax.swing.JButton inputFinishedBtn1;
    private javax.swing.JButton inputFinishedBtn2;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton logicBtn;
    private javax.swing.JButton logicReturnBtn1;
    private javax.swing.JButton logicReturnBtn2;
    private javax.swing.JPanel logicSelectionPage;
    private javax.swing.JPanel logicToEnglshPanel;
    private javax.swing.JButton logicinfoBtn;
    private javax.swing.JButton logicinfoBtn1;
    private javax.swing.JTable matrix1Table;
    private javax.swing.JTable matrix2Table;
    private javax.swing.JButton matrixBtn;
    private javax.swing.JButton matrixConfirmBtn;
    private javax.swing.JPanel matrixInfoPanel;
    private javax.swing.JButton matrixinfo_Btn;
    private javax.swing.JButton matrixinfo_Btn1;
    private javax.swing.JLabel matrixlabel3;
    private javax.swing.JButton regexBtn;
    private javax.swing.JPanel regexInfoPanel;
    private javax.swing.JButton regexinfoBtn;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton returnBtn;
    private javax.swing.JComboBox<String> rowSizeBox;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JLabel textArea_bg;
    private javax.swing.JLabel textArea_bg1;
    private javax.swing.JLabel tipLabel;
    private javax.swing.JLabel tipLabel_bg;
    private javax.swing.JTable toEngish_JTable;
    private javax.swing.JScrollPane toEnglish_Table;
    private javax.swing.JScrollPane toEnglish_Table1;
    private javax.swing.JScrollPane toEnglish_Table2;
    private javax.swing.JTextArea toEnglish_TextArea;
    private javax.swing.JButton toEnglish_confirmBtn;
    private javax.swing.JLabel toEnglish_label1;
    private javax.swing.JLabel toEnglish_label2;
    private javax.swing.JTextField toEnglishinputFiled;
    private javax.swing.JButton toEnglishselctionBtn;
    private javax.swing.JButton toTruthTableBtn;
    private javax.swing.JPanel truthTableInfoPanel1;
    private javax.swing.JPanel truthTablePanel;
    private javax.swing.JTable truthTable_JTable1;
    private javax.swing.JTable truthTable_JTable2;
    private javax.swing.JTextArea truthTable_TextArea;
    private javax.swing.JButton truthTable_confirmBtn1;
    private javax.swing.JTextField truthTableinputFiled1;
    private javax.swing.JButton welcomeBtn;
    // End of variables declaration//GEN-END:variables


    
}
